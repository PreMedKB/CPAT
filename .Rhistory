install.packages("forcats")
install.packages("pheatmap")
install.packages("forcats")
install.packages("forcats")
install.packages("forcats")
install.packages("forcats")
install.packages("forcats")
log10(10)
10*log10(10)
install.packages("MSFA")
BiocManager::install("MSFA")
rm(list())
rm?
?rm
rm(envir)
library(maftools)
install.packages(maftools)
library("maftools")
install.packages("maftools")
library("maftools")
BiocManager::install
BiocManager::install("maftools")
library("maftools")
BiocManager::install("PoisonAlien/maftools")
library("maftools")
library("maftools")
BiocManager::install("PoisonAlien/maftools")
BiocManager::install("maftools")
install.packages("systemfonts")
BiocManager::install("PoisonAlien/maftools")
f = "/Users/yaqing/Master/Projects/CBCGA/whole-pipeline/results/maf/CBCGA242560.TNscope.TN.hg38_multianno.txt"
CBCGA242560.TNscope <- annovarToMaf()
library("maftools")
CBCGA242560.TNscope <- annovarToMaf(f, Center = NULL,refBuild = "hg38",tsbCol = "Tumor_Sample_Barcode",
table = "refGene",ens2hugo = TRUE,basename = NULL,sep = "\t",MAFobj = FALSE,sampleAnno = NULL)
View(CBCGA242560.TNscope)
f_p = "/Users/yaqing/Master/Projects/CBCGA/whole-pipeline/results/uni_mdf_tn.txt"
df <- annovarToMaf(f_p,Center = NULL,refBuild = "hg38",tsbCol = "Tumor_Sample_Barcode",
table = "refGene",ens2hugo = TRUE,basename = NULL,sep = "\t",MAFobj = FALSE,sampleAnno = NULL)
View(df2)
library(maftools)
f_p = "/Users/yaqing/Master/Projects/CBCGA/whole-pipeline/results/uni_mdf_tn.txt"
df <- annovarToMaf(f_p,Center = NULL,refBuild = "hg38",tsbCol = "Tumor_Sample_Barcode",
table = "refGene",ens2hugo = TRUE,basename = NULL,sep = "\t",MAFobj = FALSE,sampleAnno = NULL)
View(df)
df[df$Caller == "TNscope,TNscope"]
df[df$Caller == "TNscope,TNscope"]$Caller
df[df$Caller == "TNscope,TNscope"]$Caller <- "TNscope"
df[df$Caller == "TNscope,TNscope"]
saveRDS("/Users/yaqing/Master/Projects/CBCGA/whole-pipeline/results/203samples_maf.rds")
saveRDS(df, "/Users/yaqing/Master/Projects/CBCGA/whole-pipeline/results/203samples_maf.rds")
View(df)
list()
ls()
rm(list=ls())
plot_col_t <- read.csv("~/Downloads/plot_col_t.csv")
ggplot(plot_col_t, aes(TheoreticalValue, Test))
library(ggplot2)
ggplot(plot_col_t, aes(TheoreticalValue, Test))
ggplot(plot_col_t, aes(TheoreticalValue, Test)) + geom_point(aes(color=Type_detail),size=1)
View(plot_col_t)
plot_col_t$TheoreticalValue <- as.numeric(plot_col_t$TheoreticalValue)
plot_col_t$Test <- as.numeric(plot_col_t$Test)
ggplot(plot_col_t, aes(TheoreticalValue, Test)) + geom_point(aes(color=Type_detail),size=1)
plot_col_t
library(ggpubr)
ggscatter(plot_col_t, TheoreticalValue, Test, color = "Type_detail")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", alpha = 0.1)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", alpha = 0.2)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", alpha = 0.6)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", alpha = 0.6, size = 3)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 3)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.7, size = 3)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.7, size = 3,)
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.7, size = 3, pattele = "jco")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.7, size = 3, palette = "jco")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 3, palette = "jco")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = "jco")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = "Paired")
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = c("red", "green"))
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = c("red", "blue"))
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = c("blue", "red"))
ggscatter(plot_col_t, "TheoreticalValue", "Test", color = "Type_detail", shape = "Type_detail", alpha = 0.6, size = 4, palette = "jco")
i
length(omics)
library(pacman)
p_load(tidyverse)
p_load(SNFtool)
p_load(iClusterPlus)
p_load(IntNMF)
source("./src/calSNR.R")
source("./src/calARI.R")
source("./src/calNMI.R")
source("./src/calRI.R")
source("./src/run_integration.R")
dtypes <- c('bad_before', 'good_before', 'bad_after', 'good_after')
file.names <- c("rna.txt", "protein.txt", "metabolite.txt")
methods <- c("intnmf", "iclusterplus", "snf")
labels <- rep(rep(c(5, 6, 7, 8), each = 3), times = 2)
meta <- read.csv("./data/metadata_144.tsv", sep = "\t")
NMI <- c(); ARI <- c(); RI <- c()
# SNR_1: intnmf-consensus matrix; iclusterplus-latent variable matrix; snf-similarity matrix
# SNR_2: intnmf-W (Common basis matrix across the multiple data sets); iclusterplus-latent variable matrix; snf-similarity matrix
SNR_1 <- c(); SNR_2 <- c()
for (dt in dtypes) {
dt}
dt
folder <- paste0("./data/quartet_2batches/", dt)
sep="\t"
filtering = "none"
num.factors=4
results <- list()
t <- 1
method <- numeric(0)
num.factors <- as.numeric(num.factors)
## Creating list of omics
omics <- list()
for(i in 1:length(file.names)){
omics[[i]] <- as.matrix(read.table(paste(folder, file.names[i], sep="/"), sep=sep, row.names=1, header=T))
omics[[i]] <- t(apply(omics[[i]], 1, function(x){(x-mean(x))/sd(x)}))
}
## Restricting to common samples and filtering
samples <- colnames(omics[[1]])
for(j in 1:length(omics)){
samples <- intersect(samples, colnames(omics[[j]]))
}
for(j in 1:length(omics)){
omics[[j]] <- omics[[j]][,samples]
if (filtering != "none"){
x <- apply(omics[[j]],1,sd)
x <- as.matrix(sort(x, decreasing = T))
w <- which(x>0)
if(filtering=="stringent"){
selected <- rownames(x)[1:min(w[length(w)],5000)]
}else{
selected <- rownames(x)[1:min(w[length(w)],6000)]
}
m <- match(rownames(omics[[j]]),selected)
w <- which(!is.na(m))
omics[[j]] <- omics[[j]][w,]
}else{
omics[[j]] <- omics[[j]][which(apply(omics[[j]],1,sd)>0),]
}
}
folder
??mcia
browseVignettes("omicade4")
f_p = "/Users/yaqing/Master/Projects/CBCGA/ngscheckmate/all_wes_output_20210721/all_wes_corr.csv"
corr = read.csv(f_p)
View(corr)
corr = read.csv(f_p, row.names = "X")
View(corr)
output_corr_matrix <- read.delim(f_p)
View(output_corr_matrix)
output_corr_matrix = read.csv(f_p, row.names = "X")
data = output_corr_matrix
as.dist((1 - data[,-1]))
library(pheatmap)
library(ggplot2)
f_p = "/Users/yaqing/Master/Projects/CBCGA/ngscheckmate/all_wes_output_20210721/all_wes_corr.csv"、
output_corr_matrix = read.csv(f_p, row.names = "X")
pheatmap(output_corr_matrix,
show_rownames = T,
show_colnames = T,
cluster_cols = F,
cluster_rows=T)
f_p = "/Users/yaqing/Master/Projects/CBCGA/ngscheckmate/all_wes_output_20210721/all_wes_corr.csv"
output_corr_matrix = read.csv(f_p, row.names = "X")
pheatmap(output_corr_matrix,
show_rownames = T,
show_colnames = T,
cluster_cols = F,
cluster_rows=T)
pheatmap(output_corr_matrix,
show_rownames = T,
show_colnames = T,
cluster_cols = F,
cluster_rows=T,
filename='test.pdf',#输出文件的名称
fontsize_row=5, #行字体的大小
height=20,  #输出图片的高度
scale = "row",
angle_col=45, #调整字的角度
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100),
clustering_distance_rows = 'euclidean',
clustering_method = 'single',
)
pheatmap(output_corr_matrix,
show_rownames = F,
show_colnames = F,
cluster_cols = F,
cluster_rows=T,
filename='test.pdf',  #输出文件的名称
fontsize_row=5,  #行字体的大小
height=20,  #输出图片的高度
scale = "row",
angle_col=45, #调整字的角度
color =colorRampPalette(c("#8854d0", "#ffffff","#fa8231"))(100)
)
devtools::install_github("WWXKenmo/ENIGMA")
library("ENIGMA")
install.packages("ENIGMA_v1.1.tar.gz",repos=NULL, type="source",INSTALL_opts=c("--no-multiarch"))
install.packages("~/Downloads/ENIGMA_v1.1.tar.gz",repos=NULL, type="source",INSTALL_opts=c("--no-multiarch"))
devtools::install_github("WWXKenmo/ENIGMA")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
library("ENIGMA")
devtools::install_github("WWXKenmo/ENIGMA")
library("ENIGMA")
library("ChAMP")
### Data loading and filtering
myImport <- champ.import("./data/methylation", arraytype = "EPIC")
myFilter <- champ.filter(beta = myImport$beta, M = myImport$M, arraytype = "EPIC")
library(MOFA2)
install.packages('DMwR')
BiocManager::install('DMwR')
?sva::ComBat
library(DMwR)
newdata<-sleep
knnOutput <- knnImputation(newdata)
anyNA(knnOutput)
head(knnOutput)
library('DMwR')
setwd("/Users/yaqing/Master/Projects/CPAT/cpat")
library(ggplot2); library(ggsci); library(ggthemes); library(ggpubr); library(tidyverse)
######### Distribution
## Haplotype
haplotype <- data.frame()
race <- c("African American/Afro-Caribbean", "American", "Central/South Asian", "East Asian", "European", "Latino", "Near Eastern", "Oceanian", "Sub-Saharan African")
for (f in list.files('./assets/population_frequency/')){
gene <- strsplit(f, '_')[[1]][1]
if (gene != "CYP2D6"){
frequency <- read.csv(paste0('./assets/population_frequency/', f), sep="\t")
cols <- c("Allele", race)
colnames(frequency) <- cols
frequency$Gene <- gene
haplotype <- rbind(haplotype, frequency)
}
}
haplotype_frequency <- pivot_longer(haplotype, cols = -c(Allele, Gene), names_to = 'Group')
## Diplotype
diplotype <- data.frame()
race <- c("African American/Afro-Caribbean", "American", "Central/South Asian", "East Asian", "European", "Latino", "Near Eastern", "Oceanian", "Sub-Saharan African")
for (f in list.files('./assets/diplotype_frequency/')){
gene <- strsplit(f, '_')[[1]][1]
if (gene != "CYP2D6") {
frequency <- read.csv(paste0('./assets/diplotype_frequency/', f), sep="\t")
cols <- c("Allele", race, "Global")
colnames(frequency) <- cols
frequency$Gene <- gene
diplotype <- rbind(diplotype, frequency)
}
}
diplotype_frequency <- pivot_longer(diplotype, cols = -c(Allele, Gene), names_to = 'Group')
####################
# Plot
sd_per_allele <- diplotype_frequency %>% filter(Group != 'Global') %>% #value>2e-12,
group_by(Gene, Allele) %>% summarise(SD = sd(value), Mean = mean(value))
sd_per_allele$CV <- sd_per_allele$SD/sd_per_allele$Mean
tmp <- sd_per_allele %>% group_by(Gene) %>% summarise(median = median(SD)) %>% arrange(median)
sd_per_allele$Gene <- factor(sd_per_allele$Gene, levels = tmp$Gene)
sd_per_allele
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=SD, color=Gene, fill=Gene, alpha=0.95)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
# CV的boxplot
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene, alpha=0.95)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
# CV的boxplot
tmp <- sd_per_allele %>% group_by(Gene) %>% summarise(median = median(CV)) %>% arrange(median)
sd_per_allele$Gene <- factor(sd_per_allele$Gene, levels = tmp$Gene)
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene, alpha=1)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene, alpha=1)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene, alpha=0.99)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene)) +
geom_boxplot(alpha = 0.9) + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene)) +
geom_boxplot(alpha=0.85) + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
######### Distribution
## Haplotype
haplotype <- data.frame()
race <- c("African American/Afro-Caribbean", "American", "Central/South Asian", "East Asian", "European", "Latino", "Near Eastern", "Oceanian", "Sub-Saharan African")
for (f in list.files('./assets/population_frequency/')){
gene <- strsplit(f, '_')[[1]][1]
if (gene != "CYP2D6"){
frequency <- read.csv(paste0('./assets/population_frequency/', f), sep="\t")
cols <- c("Allele", race)
colnames(frequency) <- cols
frequency$Gene <- gene
haplotype <- rbind(haplotype, frequency)
}
}
haplotype_frequency <- pivot_longer(haplotype, cols = -c(Allele, Gene), names_to = 'Group')
## Diplotype
diplotype <- data.frame()
race <- c("African American/Afro-Caribbean", "American", "Central/South Asian", "East Asian", "European", "Latino", "Near Eastern", "Oceanian", "Sub-Saharan African")
for (f in list.files('./assets/diplotype_frequency/')){
gene <- strsplit(f, '_')[[1]][1]
if (gene != "CYP2D6") {
frequency <- read.csv(paste0('./assets/diplotype_frequency/', f), sep="\t")
cols <- c("Allele", race, "Global")
colnames(frequency) <- cols
frequency$Gene <- gene
diplotype <- rbind(diplotype, frequency)
}
}
diplotype_frequency <- pivot_longer(diplotype, cols = -c(Allele, Gene), names_to = 'Group')
####################
# Plot
sd_per_allele <- diplotype_frequency %>% filter(Group != 'Global') %>% #value>2e-12,
group_by(Gene, Allele) %>% summarise(SD = sd(value), Mean = mean(value))
sd_per_allele$CV <- sd_per_allele$SD/sd_per_allele$Mean
# SD的boxplot
tmp <- sd_per_allele %>% group_by(Gene) %>% summarise(median = median(SD)) %>% arrange(median)
sd_per_allele$Gene <- factor(sd_per_allele$Gene, levels = tmp$Gene)
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=SD, color=Gene, fill=Gene, alpha=0.95)) +
geom_boxplot() + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
# CV的boxplot
tmp <- sd_per_allele %>% group_by(Gene) %>% summarise(median = median(CV)) %>% arrange(median)
sd_per_allele$Gene <- factor(sd_per_allele$Gene, levels = tmp$Gene)
p1 <- sd_per_allele %>%
ggplot(aes(x=Gene, y=CV, color=Gene, fill=Gene)) +
geom_boxplot(alpha=0.85) + theme_few() +
#theme(axis.text.x = element_text(angle = 30, hjust=1, vjust=1)) +
scale_color_viridis_d(direction = -1) + scale_fill_viridis_d(direction = -1) +
labs(y = 'SDs of diplotype frequencies', x=NULL)
p1+coord_flip()+theme(legend.position = "none")
